@startuml physical_machine_usage
/' SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2020 Intel Corporation
'/

participant TestMaster
participant RobotFramework
participant PhysicalNode

activate TestMaster #FFBBBB
TestMaster -> RobotFramework: run_test_suite()
activate RobotFramework #FFBBBB

RobotFramework -> RobotFramework: load_machine_pool_from_json()
note right: Each machine in a pool can be\nused exclusively by this Test Master

RobotFramework -> RobotFramework: try_lock('PhysicalNode')
note right: Locking mechanism can be\nimplemented on top of\nfile locks or a simple\ndatabase on Test Master
alt successfully locked

    RobotFramework -> PhysicalNode: check_if_node_can_be_used()
    activate PhysicalNode #FFBBBB
    PhysicalNode -> PhysicalNode: is_clean_lvm_snapshot_available()

    alt prerequisites met
        PhysicalNode --> RobotFramework: Yes
        RobotFramework -> PhysicalNode: revert_to_lvm_snapshot('clean')
        RobotFramework -> PhysicalNode: create_lvm_snapshot('clean')
        note right: LVM snapshot is\ndestroyed upon revert

        RobotFramework -> PhysicalNode: deploy()
        RobotFramework -> PhysicalNode: create_lvm_snapshot('deploy')

        loop for each TestCase
            RobotFramework -> PhysicalNode: revert_to_lvm_snapshot('deploy')
            RobotFramework -> PhysicalNode: create_lvm_snapshot('deploy')
            RobotFramework -> PhysicalNode: run_tc()
        end

        RobotFramework -> RobotFramework: unlock('PhysicalNode')
        RobotFramework --> TestMaster: Success

    else one or more prerequisites not met
        PhysicalNode --> RobotFramework: No
        RobotFramework -> RobotFramework: unlock('PhysicalNode')
        RobotFramework --> TestMaster: Check another Node
    end
else try_lock failed: Node is in use by other test execution
    RobotFramework --> TestMaster: Check another Node
end

@enduml
